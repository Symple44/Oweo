// js/config/client_demos.js - Version compl√®te corrig√©e
// Configuration centralis√©e et gestion des d√©monstrations client

window.OweoClientDemos = {
    
    // Configuration des d√©mos disponibles
    demos: {
        'outil-chiffrage-demo': {
            id: 'outil-chiffrage-demo',
            title: 'D√©mo Chiffrage ERP',
            subtitle: 'Outil de chiffrage interactif',
            description: 'D√©monstration compl√®te d\'un outil de chiffrage sp√©cialis√© pour la charpente m√©tallique avec structure hi√©rarchique et m√©tr√©s automatis√©s',
            longDescription: 'Cette d√©monstration pr√©sente un syst√®me de chiffrage complet int√©gr√© dans un ERP sp√©cialis√© m√©tallurgie. Vous d√©couvrirez les fonctionnalit√©s de structuration hi√©rarchique des projets, de calcul automatique des m√©tr√©s, et d\'interface professionnelle adapt√©e aux besoins des charpentiers m√©talliques.',
            icon: 'üîê',
            color: 'primary',
            features: [
                'Structure hi√©rarchique des projets',
                'M√©tr√©s automatiques avanc√©s',
                'Calculs temps r√©el multi-crit√®res',
                'Interface professionnelle intuitive',
                'Export vers syst√®mes de production',
                'Gestion des variantes et options'
            ],
            technicalFeatures: [
                'Base de donn√©es produits int√©gr√©e',
                'Algorithmes de calcul optimis√©s',
                'Interface responsive et moderne',
                'Int√©gration ERP native',
                'Reporting avanc√©',
                'Workflows personnalisables'
            ],
            estimatedDuration: '15-20 min',
            complexity: 'Interm√©diaire',
            category: 'ERP & Gestion',
            targetAudience: ['Dirigeants', 'Charg√©s d\'affaires', 'Commerciaux', 'Responsables production'],
            businessValue: [
                'R√©duction du temps de chiffrage de 60%',
                'Am√©lioration de la pr√©cision des devis',
                'Standardisation des processus',
                'Meilleure tra√ßabilit√© des donn√©es'
            ],
            prerequisites: [],
            demoFlow: [
                'Pr√©sentation de l\'interface',
                'Cr√©ation d\'un nouveau projet',
                'Structuration hi√©rarchique',
                'Calculs automatiques',
                'Export et validation'
            ]
        },
        'import-dstv-demo': {
            id: 'import-dstv-demo',
            title: 'D√©mo Import DSTV',
            subtitle: 'Assignation automatique aux machines',
            description: 'Import automatique de fichiers DSTV avec analyse intelligente et assignation optimis√©e aux machines de production',
            longDescription: 'Cette d√©monstration avanc√©e illustre un workflow complet d\'import de fichiers DSTV avec analyse automatique des pi√®ces et assignation intelligente aux machines de production. Le syst√®me optimise automatiquement la r√©partition des t√¢ches en fonction des capacit√©s machines et des caract√©ristiques des pi√®ces.',
            icon: 'üîÑ',
            color: 'secondary',
            features: [
                'Import fichiers DSTV multiples',
                'Analyse automatique des pi√®ces',
                'Assignation intelligente aux machines',
                'Calculs temps et co√ªts automatis√©s',
                'Export vers ERP et production',
                'Optimisation des charges machines'
            ],
            technicalFeatures: [
                'Parseur DSTV avanc√© multi-formats',
                'Algorithmes d\'optimisation IA',
                'Interface drag & drop intuitive',
                'Calculs temps r√©el',
                'Int√©gration machines CNC',
                'Reporting d√©taill√©'
            ],
            estimatedDuration: '10-15 min',
            complexity: 'Avanc√©',
            category: 'Production & Optimisation',
            targetAudience: ['Responsables production', 'Responsables m√©thodes', 'Op√©rateurs CNC', 'Dirigeants'],
            businessValue: [
                'Automatisation compl√®te du workflow',
                'Optimisation des temps de production',
                'R√©duction des erreurs d\'assignation',
                'Am√©lioration de la productivit√© de 40%'
            ],
            prerequisites: ['Connaissance des fichiers DSTV', 'Notions de production m√©tallique'],
            demoFlow: [
                'Import de fichiers DSTV',
                'Analyse automatique des pi√®ces',
                'Assignation intelligente',
                'Optimisation des charges',
                'Export vers production'
            ]
        }
    },

    // √âtat du syst√®me
    initialized: false,
    pendingDemoAccess: null,
    
    /**
     * Initialisation du syst√®me de d√©mos
     */
    init() {
        try {
            if (this.initialized) {
                console.log('üîê Client Demos d√©j√† initialis√©');
                return;
            }
            
            this.initializeDemoCards();
            this.bindEvents();
            this.setupAnalytics();
            
            this.initialized = true;
            console.log('üîê Client Demos system initialized successfully');
            
        } catch (error) {
            console.error('üîê Erreur initialisation Client Demos:', error);
        }
    },

    /**
     * Obtenir la configuration d'une d√©mo
     */
    getDemoConfig(demoId) {
        try {
            const demo = this.demos[demoId];
            if (!demo) {
                console.warn(`üîê D√©mo ${demoId} non trouv√©e`);
                return null;
            }
            return { ...demo }; // Retourner une copie
        } catch (error) {
            console.error(`üîê Erreur r√©cup√©ration config d√©mo ${demoId}:`, error);
            return null;
        }
    },

    /**
     * Obtenir toutes les d√©mos disponibles
     */
    getAllDemos() {
        try {
            return Object.values(this.demos).map(demo => ({ ...demo }));
        } catch (error) {
            console.error('üîê Erreur r√©cup√©ration toutes d√©mos:', error);
            return [];
        }
    },

    /**
     * Obtenir les d√©mos par cat√©gorie
     */
    getDemosByCategory(category) {
        try {
            return Object.values(this.demos)
                .filter(demo => demo.category === category)
                .map(demo => ({ ...demo }));
        } catch (error) {
            console.error(`üîê Erreur r√©cup√©ration d√©mos cat√©gorie ${category}:`, error);
            return [];
        }
    },

    /**
     * Obtenir les d√©mos par audience cible
     */
    getDemosByAudience(audience) {
        try {
            return Object.values(this.demos)
                .filter(demo => demo.targetAudience && demo.targetAudience.includes(audience))
                .map(demo => ({ ...demo }));
        } catch (error) {
            console.error(`üîê Erreur r√©cup√©ration d√©mos audience ${audience}:`, error);
            return [];
        }
    },

    /**
     * V√©rifier si une d√©mo existe
     */
    demoExists(demoId) {
        try {
            return demoId in this.demos;
        } catch (error) {
            console.error(`üîê Erreur v√©rification existence d√©mo ${demoId}:`, error);
            return false;
        }
    },

    /**
     * Obtenir la couleur CSS pour une d√©mo
     */
    getDemoColor(demoId) {
        try {
            const demo = this.demos[demoId];
            if (!demo) return 'primary';
            
            const colorMap = {
                'primary': 'var(--demo-primary, #00d4ff)',
                'secondary': 'var(--demo-secondary, #7c3aed)',
                'accent': 'var(--demo-accent, #ff6b35)',
                'success': 'var(--demo-success, #10b981)',
                'warning': 'var(--demo-warning, #f59e0b)',
                'error': 'var(--demo-error, #ef4444)'
            };
            
            return colorMap[demo.color] || colorMap.primary;
        } catch (error) {
            console.error(`üîê Erreur r√©cup√©ration couleur d√©mo ${demoId}:`, error);
            return 'var(--demo-primary, #00d4ff)';
        }
    },

    /**
     * G√©n√©rer le HTML d'une carte de d√©mo
     */
    generateDemoCard(demoId, options = {}) {
        try {
            const demo = this.getDemoConfig(demoId);
            if (!demo) return '';
            
            const {
                showDescription = true,
                showFeatures = false,
                showDuration = true,
                showCategory = true,
                compact = false
            } = options;
            
            const cardClass = compact ? 'demo-card demo-card--compact' : 'demo-card';
            const color = this.getDemoColor(demoId);
            
            return `
                <div class="${cardClass}" data-demo-id="${demo.id}" style="--demo-color: ${color}">
                    <div class="demo-card-header">
                        <div class="demo-icon">${demo.icon}</div>
                        <div class="demo-info">
                            <h3 class="demo-title">${demo.title}</h3>
                            <p class="demo-subtitle">${demo.subtitle}</p>
                        </div>
                        ${showCategory ? `<span class="demo-category">${demo.category}</span>` : ''}
                    </div>
                    
                    ${showDescription && !compact ? `
                        <div class="demo-card-body">
                            <p class="demo-description">${demo.description}</p>
                            
                            ${showFeatures ? `
                                <div class="demo-features">
                                    <h5>Fonctionnalit√©s cl√©s :</h5>
                                    <ul>
                                        ${demo.features.slice(0, 4).map(feature => `<li>${feature}</li>`).join('')}
                                    </ul>
                                </div>
                            ` : ''}
                            
                            ${showDuration ? `
                                <div class="demo-meta">
                                    <span class="demo-duration">‚è±Ô∏è ${demo.estimatedDuration}</span>
                                    <span class="demo-complexity">üìä ${demo.complexity}</span>
                                    <span class="demo-audience">üë• ${demo.targetAudience[0]}</span>
                                </div>
                            ` : ''}
                        </div>
                    ` : ''}
                    
                    <div class="demo-card-footer">
                        <button class="demo-access-btn" data-demo-access="${demo.id}">
                            üîê Acc√©der √† la D√©mo
                        </button>
                    </div>
                </div>
            `;
        } catch (error) {
            console.error(`üîê Erreur g√©n√©ration carte d√©mo ${demoId}:`, error);
            return '<div class="demo-card demo-card--error">Erreur de chargement</div>';
        }
    },

    /**
     * G√©n√©rer une grille de toutes les d√©mos
     */
    generateDemoGrid(options = {}) {
        try {
            const {
                category = null,
                audience = null,
                compact = false
            } = options;
            
            let demos = this.getAllDemos();
            
            // Filtrer par cat√©gorie si sp√©cifi√©e
            if (category) {
                demos = demos.filter(demo => demo.category === category);
            }
            
            // Filtrer par audience si sp√©cifi√©e
            if (audience) {
                demos = demos.filter(demo => 
                    demo.targetAudience && demo.targetAudience.includes(audience)
                );
            }
            
            const gridClass = compact ? 'demos-grid demos-grid--compact' : 'demos-grid';
            
            return `
                <div class="${gridClass}">
                    ${demos.map(demo => this.generateDemoCard(demo.id, { compact })).join('')}
                </div>
            `;
        } catch (error) {
            console.error('üîê Erreur g√©n√©ration grille d√©mos:', error);
            return '<div class="demos-grid-error">Erreur de chargement des d√©mos</div>';
        }
    },

    /**
     * Initialiser les √©v√©nements pour les cartes de d√©mo
     */
    initializeDemoCards() {
        try {
            // D√©l√©gation d'√©v√©nements pour tous les boutons d'acc√®s d√©mo
            document.addEventListener('click', (e) => {
                const demoAccessBtn = e.target.closest('[data-demo-access]');
                if (!demoAccessBtn) return;

                e.preventDefault();
                e.stopPropagation();

                const demoId = demoAccessBtn.dataset.demoAccess;
                this.handleDemoAccess(demoId, demoAccessBtn);
            });
            
            console.log('üîê Cartes de d√©mo initialis√©es');
            
        } catch (error) {
            console.error('üîê Erreur initialisation cartes d√©mo:', error);
        }
    },

    /**
     * G√©rer l'acc√®s √† une d√©mo
     */
    handleDemoAccess(demoId, triggerElement = null) {
        try {
            console.log(`üîê Acc√®s d√©mo demand√©: ${demoId}`);

            // V√©rifier si la d√©mo existe
            if (!this.demoExists(demoId)) {
                console.error(`‚ùå D√©mo ${demoId} non trouv√©e`);
                this.showDemoError('D√©monstration non trouv√©e');
                return;
            }

            // Animation du bouton
            if (triggerElement) {
                this.animateDemoButton(triggerElement);
            }

            // V√©rifier l'acc√®s client
            if (typeof window.OweoClientAccess === 'undefined') {
                console.error('OweoClientAccess not loaded');
                this.showDemoError('Syst√®me d\'acc√®s client non disponible');
                return;
            }

            // V√©rifier l'authentification
            if (window.OweoClientAccess.hasAccess()) {
                this.accessDemo(demoId);
            } else {
                // Stocker la d√©mo demand√©e pour y acc√©der apr√®s authentification
                this.pendingDemoAccess = demoId;
                window.OweoClientAccess.showAuthModal(demoId);
            }

            // Analytics
            this.trackDemoAccess(demoId, 'access_requested');
            
        } catch (error) {
            console.error(`üîê Erreur gestion acc√®s d√©mo ${demoId}:`, error);
            this.showDemoError('Erreur lors de l\'acc√®s √† la d√©monstration');
        }
    },

    /**
     * Acc√©der √† une d√©mo apr√®s v√©rification
     */
    accessDemo(demoId) {
        try {
            console.log(`üöÄ Acc√®s √† la d√©mo: ${demoId}`);

            // V√©rification finale
            if (!this.demoExists(demoId)) {
                throw new Error(`D√©mo ${demoId} non trouv√©e`);
            }

            if (!window.OweoClientAccess || !window.OweoClientAccess.hasAccess()) {
                throw new Error('Acc√®s client requis');
            }

            // Navigation avec multiple fallbacks
            this.navigateToDemo(demoId);

            // Analytics
            this.trackDemoAccess(demoId, 'access_granted');
            
        } catch (error) {
            console.error(`‚ùå Erreur acc√®s d√©mo ${demoId}:`, error);
            this.showDemoError(error.message);
        }
    },

    /**
     * Navigation vers une d√©mo avec fallbacks
     */
    navigateToDemo(demoId) {
        try {
            // M√©thode 1: Router de l'application
            if (window.router && typeof window.router.navigate === 'function') {
                window.router.navigate(`/${demoId}`);
                return;
            }
            
            // M√©thode 2: Chargement direct si la page existe
            if (window.pages && window.pages[demoId]) {
                this.loadDemoDirectly(demoId);
                return;
            }
            
            // M√©thode 3: Navigation par hash
            if (window.location.hash !== `#${demoId}`) {
                window.location.hash = demoId;
                return;
            }
            
            // Fallback: URL directe
            window.location.href = `/${demoId}`;
            
        } catch (error) {
            console.error(`üîê Erreur navigation d√©mo ${demoId}:`, error);
            throw new Error('Impossible d\'acc√©der √† la d√©monstration');
        }
    },

    /**
     * Charger une d√©mo directement
     */
    loadDemoDirectly(demoId) {
        try {
            const appContainer = document.getElementById('app');
            if (!appContainer) {
                throw new Error('Conteneur d\'application non trouv√©');
            }
            
            // Rendu de la page
            if (typeof window.pages[demoId].render === 'function') {
                appContainer.innerHTML = window.pages[demoId].render();
            } else {
                throw new Error('M√©thode render non disponible');
            }
            
            // Initialisation de la page
            if (typeof window.pages[demoId].init === 'function') {
                window.pages[demoId].init();
            }
            
            // Scroll vers le haut
            window.scrollTo({ top: 0, behavior: 'smooth' });
            
            console.log(`‚úÖ D√©mo ${demoId} charg√©e directement`);
            
        } catch (error) {
            console.error(`‚ùå Erreur chargement direct d√©mo ${demoId}:`, error);
            throw error;
        }
    },

    /**
     * Animation des boutons de d√©mo
     */
    animateDemoButton(button) {
        try {
            // Animation de scale
            button.style.transform = 'scale(0.95)';
            button.style.transition = 'transform 0.15s ease';
            
            setTimeout(() => {
                button.style.transform = '';
            }, 150);
            
            // Effet de loading
            const originalText = button.textContent;
            button.textContent = 'üîÑ Chargement...';
            button.disabled = true;
            
            setTimeout(() => {
                button.textContent = originalText;
                button.disabled = false;
            }, 1500);
            
        } catch (error) {
            console.error('üîê Erreur animation bouton:', error);
        }
    },

    /**
     * G√©rer l'authentification r√©ussie
     */
    onAuthenticationSuccess() {
        try {
            console.log('üîê Authentification r√©ussie');
            
            // Si une d√©mo √©tait en attente, y acc√©der maintenant
            if (this.pendingDemoAccess) {
                setTimeout(() => {
                    this.accessDemo(this.pendingDemoAccess);
                    this.pendingDemoAccess = null;
                }, 1000);
            }
            
        } catch (error) {
            console.error('üîê Erreur gestion authentification r√©ussie:', error);
        }
    },

    /**
     * Liaison des √©v√©nements
     */
    bindEvents() {
        try {
            // √âcouter les √©v√©nements d'authentification
            window.addEventListener('clientAuthSuccess', () => {
                this.onAuthenticationSuccess();
            });
            
            // √âcouter les √©v√©nements via storage (multi-onglets)
            window.addEventListener('storage', (e) => {
                if (e.key === 'oweo_client_session' && e.newValue && this.pendingDemoAccess) {
                    setTimeout(() => {
                        this.onAuthenticationSuccess();
                    }, 500);
                }
            });
            
            console.log('üîê √âv√©nements d√©mos li√©s');
            
        } catch (error) {
            console.error('üîê Erreur liaison √©v√©nements d√©mos:', error);
        }
    },

    /**
     * Configuration des analytics
     */
    setupAnalytics() {
        try {
            // Configuration de base pour le tracking
            this.analyticsEnabled = !!(window.OweoUtils && window.OweoUtils.analytics);
            
            if (this.analyticsEnabled) {
                console.log('üîê Analytics d√©mos configur√©');
            }
            
        } catch (error) {
            console.error('üîê Erreur configuration analytics:', error);
        }
    },

    /**
     * Tracker les acc√®s aux d√©mos
     */
    trackDemoAccess(demoId, action) {
        try {
            if (!this.analyticsEnabled) return;
            
            const demo = this.getDemoConfig(demoId);
            
            window.OweoUtils.analytics.track(`demo_${action}`, {
                demoId: demoId,
                demoTitle: demo ? demo.title : 'unknown',
                demoCategory: demo ? demo.category : 'unknown',
                hasAccess: window.OweoClientAccess ? window.OweoClientAccess.hasAccess() : false,
                timestamp: Date.now()
            });
            
        } catch (error) {
            console.error('üîê Erreur tracking d√©mo:', error);
        }
    },

    /**
     * Afficher erreur de d√©mo
     */
    showDemoError(message) {
        try {
            if (window.OweoClientAccess && typeof window.OweoClientAccess.showNotification === 'function') {
                window.OweoClientAccess.showNotification(`‚ùå ${message}`, 'error', 4000);
            } else {
                console.error(`üîê Erreur d√©mo: ${message}`);
                
                // Fallback avec alert
                alert(`Erreur: ${message}`);
            }
        } catch (error) {
            console.error('üîê Erreur affichage erreur d√©mo:', error);
        }
    },

    /**
     * Rechercher des d√©mos
     */
    searchDemos(query) {
        try {
            const searchTerm = query.toLowerCase().trim();
            if (!searchTerm) return this.getAllDemos();
            
            return Object.values(this.demos).filter(demo => {
                return demo.title.toLowerCase().includes(searchTerm) ||
                       demo.description.toLowerCase().includes(searchTerm) ||
                       demo.category.toLowerCase().includes(searchTerm) ||
                       demo.features.some(feature => feature.toLowerCase().includes(searchTerm)) ||
                       demo.targetAudience.some(audience => audience.toLowerCase().includes(searchTerm));
            }).map(demo => ({ ...demo }));
            
        } catch (error) {
            console.error('üîê Erreur recherche d√©mos:', error);
            return [];
        }
    },

    /**
     * Obtenir les statistiques des d√©mos
     */
    getDemoStats() {
        try {
            const demos = this.getAllDemos();
            
            const stats = {
                total: demos.length,
                byCategory: {},
                byComplexity: {},
                averageDuration: 0
            };
            
            demos.forEach(demo => {
                // Par cat√©gorie
                stats.byCategory[demo.category] = (stats.byCategory[demo.category] || 0) + 1;
                
                // Par complexit√©
                stats.byComplexity[demo.complexity] = (stats.byComplexity[demo.complexity] || 0) + 1;
            });
            
            // Dur√©e moyenne (estimation simple)
            const totalMinutes = demos.reduce((sum, demo) => {
                const minutes = parseInt(demo.estimatedDuration.split('-')[0]);
                return sum + minutes;
            }, 0);
            
            stats.averageDuration = Math.round(totalMinutes / demos.length);
            
            return stats;
            
        } catch (error) {
            console.error('üîê Erreur calcul stats d√©mos:', error);
            return null;
        }
    },

    /**
     * V√©rifier la compatibilit√©
     */
    checkCompatibility() {
        try {
            const requirements = {
                clientAccess: typeof window.OweoClientAccess !== 'undefined',
                pages: typeof window.pages !== 'undefined',
                router: typeof window.router !== 'undefined'
            };
            
            const isCompatible = requirements.clientAccess; // Minimum requis
            
            return {
                compatible: isCompatible,
                requirements: requirements,
                missing: Object.keys(requirements).filter(key => !requirements[key])
            };
            
        } catch (error) {
            console.error('üîê Erreur v√©rification compatibilit√©:', error);
            return { compatible: false, error: error.message };
        }
    },

    /**
     * R√©initialiser le syst√®me
     */
    reset() {
        try {
            this.pendingDemoAccess = null;
            this.initialized = false;
            console.log('üîê Client Demos r√©initialis√©');
        } catch (error) {
            console.error('üîê Erreur r√©initialisation:', error);
        }
    }
};

// Auto-initialisation
document.addEventListener('DOMContentLoaded', () => {
    window.OweoClientDemos.init();
});

// Initialisation suppl√©mentaire pour les SPA
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
        window.OweoClientDemos.init();
    });
} else {
    // DOM d√©j√† charg√©
    setTimeout(() => {
        window.OweoClientDemos.init();
    }, 100);
}

console.log('üîê Client Demos configuration loaded with complete management system');